package com.jz;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.*;

public class Entry {
  private static Log log = LogFactory.getLog(Entry.class);

  public static void main(String[] args) throws Exception {

    Entry entry = new Entry();
    int[] dict = new int[26];
    String target = "accd";
    for(int i = 0 ; i < target.length() ; i++) {
      dict[target.charAt(i) - 'a']++;
    }


    log.info(entry.checkInclusion("qfkzizwqb",
        "ecroybojtsudkgfbjkeroalzkjixzjuypdcurdzoqpzgnjosrcwzqmjmzeikuczbyjolskpwthdsvungeyopfhjoksqlkaclnooigbflvsujymtwobjjbdgmqoixtpkcwmhmmhvjxpkxfkvundlpecgukqmdocxpvpljjqkkyyfgcldfpihmwnywjlyzptognhmpbctihtakjohkwglgpjqkrxmggeifmuvuvvtcxkkwdlmrupfyecfwdcryqbsfbqzgmxwvpipkmjydikhgdnxlrmukhjrmmwliqclnaoypqdrhdwsicaojulpuuyakqzwdcnusavgzkkcwswzpxwvienfqzzdemrghxmnumdokfdflejkwqzibjhzijlpalziouqmnkakoyrejtpxcbgyryzsgdqztvpipbnwvxyoeimvqrljwpqweagghckwmopxmnenfakuqlclglhkpxvjubtoerwroujtrfdauvfnidjxkwcgjkkvciicufnicwhxmdlcavkufrnmlwrqpdatklwchigxiqtkrxnmjzjqtukrjehjlkhztvrwttfrpkcgbkhlrblidpftpxssrmiwgoybkqlkhimmvyzlpyfeybwbimrpacbmxcmbxiodxvoepxwsudffekdjgsaxvjtwkzzkbmnlczvnycquolczlrtcvvxqkaezynvasmygxpqjxjknedlewevsuwfzkdatbgtpbivqtehwookphezsmaxmuuicyuxoltgybifxfjlbcehyuoqsvsntenjwrcedlyeckqkjqbettcxntnbztezfepvrbmsmihhuwfghcalytlenviyrqhpfxtpdxlyhorytrtodbjurnnkdxnqsrbtlkgudcgtmzyhzqfrecgphqgximaqxnxuzokyvcgmtsdolsscksedvqfomjahwrkcjykldwmzurngvdkdvpumzvkfvnzjmorvnopckrwisognwdqwtkdccsqodsfpjzgntplqzdjrtnuofjrdotbewwldsfbdkickebwaellaeqrcswoiazjjdywrntroxjpqpbajmgcxpifwajoinogbddiekwpvyaeeafxaghwpntagrajcswkockgilvdhlohwonkhbifqmmimzsvtvuijouvbeqfcbsagscalcvqsepigxgsyiylbuiduivweenozonlbsodsbgytqihtymvqdbcljbucwsqxvhuwsxuzlzervzggrtzaqbstofuvbvjdukpcddsobnlbtibpdvhhghpayawnytewiwnfblkkcbdduhhqgukjcqpqeldnvcczpojxnrbzlrtnkwcxacxkopjmxszkgdjtadyvqaauioqjpghlbxxpvtmqfwlhsagmygvruzunkvkmssfeaxejtldpdyyflhdactzryxcxqtzufzmgnkapuzdlgqsxsnnwhgtkuomzofbczlnlgowrdfztwedbscekgiaoukrizxljszpwluauiqkjshvwmqwtjwircyhnkeywwtnieqegiofhuafmgbkmthtpqycgqhzjdfvqdzifhezjczeqeyzhxwqixhpevdgwpvecgapbpxdlgspqplqodalhjxvqcfavpzdnkyuaejusivryxtdycpgyqkbnzbnldvhpdpijxbgocqecitfkdvguxbqgwrsozasrzzdsehxzisouhvkymiydhbwkhlrgotlnnmfppveffwokgbyvwihsogbdhtkihbbxdsgrpgtvodnqfwmleqjhgljrqtimrandpniiyztzktwbcaonxohtutmonsmthtshjvtqjbpetfyraguhdvfmgepnhdwfbbrzrjzhkvkciyjfmffcancnxjakentockbslhexdcgbucnhaudhftvfsmiqayylgbeswyyhjrcumjgyakpkcnljkjcgoserjhoplhxzcfazwypvftggifolmpwwsdyrscrhgqaofwyyjqtnmdvnfmracsjnvfwcoqyzfaafjexxrlmvualbbysrbjhjbfcrhafmnugujxkumbgahjfmfvmhutulinbnfeviqpbmamjoitugeqiaxuvcbnsqsolozqavvupyvqemwehwchdzsbfslzuiuqljdksorusxqsqferjsjgrfttzzgxrzcovtyvhalkssoignwyxdvlfnfqcigoiyvtlxmzadhxurpbfttdtgixvunhxgkakkakhkmpibsjndmokofiykthdprpcvlcuevjalahbikjznmsofhxbplxtcluqehrvbpkdjlqktevgmcgenrzsghjnmdjcxobeauvdjujzxamvsepsanwyeqgooefliloaqjajkozmhtuvsnivkncilwhwvjmtmyuhaenzztytowodzqrapykhjqsjqttitsesvusiuoyjslxuelosgpcfspmxlekgcfbqwgtlzmvqjzbscunszhpikbdlhknkzqdlhujtuapjqscycloggaczryjtgwobvytjatguuvoponhsxtndbqsycuvfkufymprbdcaiwtakfgcwbkrdodtlbaybxwuljlatcjvahvglaewzadgshczinzsotpioxkbotqjvxxqslodnhelovsvdnfbaoedpotrodchvvhblcxgdrvwcbdtokokhimhffzdtssusqjhrknupstwxaeltibjjhabjxmywaarqrdapmmlpvqruqrmcmcyojhxacuszdmjnoimeilgflvcayghlvncgibgpfbpnmqqwvpmmgnwmbhxbvbljybxybjfwpskghpllaqemaxrsykcjgpzygpyksvpizgbriffwcfzphgngvtppuhhblnqtqeoqcqytclguedwtwkprcbeainmvfjrevwmifbbtjxrzaxfctpgumzcgfryudzouebsxvqegikypnjcfkddjtduktqqxzhrdhhhfqkjoknuxllnulpftwrtyaxaktgriawxnjysehrujbnonqikbxqxotzgvgpgqzmjjsarfrgwakrzeixaqfsdpjjebrexvujmicbojqwsrfvpqtbyjztnflllvtdlvmjelutyehqdaaatmlpbxztwhexebsuwmrbizoxinniiflaqgxyjfddgxdtjhhafgiujarveivwbyylwrrrnbmnfnazkzjqlwlbbepdktqitjrzhfqlioycfzqdzxqcgdjztklpqxgmedqzibncobiudcfcnlqdynjegfgavuqkepazhdgjlrckzbgphzgmqgjruzynccsfuuvvugopeznjraieeapxbtuynflhbhixomyxixysysdmicckhksiaznpjxpputtvxocpkxarcznwcawaunugeruybyqenxdmtzdljdwukfeufiroivdvibwehzgtecnpdkynzlpgefljhkluzcktucxplvexugyogkfjngdndwxgptkretfkiwvkkbqfclptiqwgsbwenvybejdezlthdgaluuequlrrwzrdgoodujbbzpitjxxaxbonptntocaubchweuffbxpicoatgpnqeatyohfjjhitqajqbtgezwxghqjadlvyyybpyzhcicoajoacdgascwbnwcjvqholpxsakcndzcrvpvanxylxajelhhghhbfvclpwxjidakbizzuqwkmsqprcpwoeteeadkklecaswkkolfhjntnnnhmqeaukxwdjhmincgzxtyskrgzlqiwqrvsfhbapohtkdhemubyplgrbjaghupcpfvhpthxzhtcxzpplyftpwoqsihfpcggdhkuefkawvktbfheyizdedmwqxiuypiuqbvtxupowutcxrtjdtnqvzfdwyoynsgztwrbarbuqteffjkhdkpxinmjkzeiacbbdhiqjvdiheaqtfghwrxycccillibffqqmhgrwavdrdqiifsnvutxgonhupoywiwpyvxumuhggmvdsetfiaufmtlqfhmjgqdjedybptordpjuyxvczslielisanwswcwfiufnbuttnlgftslobnfxjcbladilctcomicavrfqynbjkgxshrepgctelbfxmwenazqokzbsxlmnvoiwsyrgqrphediwpdqanybediavrvsgemknltbavpdyxiipmgxlncsrarexcbzgcasnhgihvmrsvpskacrysliabhtxaiipgjhkftnvladmokxpjgxwpbjofsfbddwevctmidbjehdsftwhxjunhjybiexrwjsrqeftjczhnkoctowezegdttoegytdpvykibbfqwbaqahvljwtonnannkffxvepxwyhqqsmoskedubzmlfupyuociyzcvzyhdhkqfrvbtkqdctlmnlylyphjbhsmwgjhbkpshefkoasxxtqjhjdvbefdycolenlistezratvxxknofscvnsugdxrcgsnxyyiyizsymgzlskmscjoovjusfpapmudrbzkqxoxldvyrfvfrmijenyetathtuzjsqjdrxwepgdvqrlmnxywohbhhzuhawkymjltdorqxdnpfkfxhjeeyjvotrqoxxhtlybtlupyqrilkyungnwzpgvefyjlfqflmmkjfxcxzoxwtpajlmrecjjznxlsoslhknrzdyfhieoifipqnbhyleshevrrunhetrpzjlrfadqdjkrcjphuocxllsjcosxfzpqgldkdlinfptzkylptcgjszynrfvmukrxxqkaqnlrcdnnmkuwvurtiierqhdxiwonjkaogetvcbabrsvldaqbfniejhnujstmzcultblmwvdmokgxxhevztjlsnzmaiqbciyekibnqbcrwukgyxdjmvwhywjsryyzgttixocudtjlrgbnpteevhjbnehdaoqwbpkkizitfamoaaslmslezljjnbyxbromluzjnljzuhdfzrcldaaozcwbhivmpdxuhrehtofkpvcorcfiwccagwpvzazmvpygmyasghyzchllyvfyglrtxhmvifegczwjlpblujjsedyqkrljvkmolgtscnuosabxphchfsyfarzlbzihwofqlqnhdhywlbobzdmldembewdusrowgbkskwdtqeidrdokejiuiquyhvsunvnejcbxvyukrpiyndjbcqokhbktwdgkvubksomjrdgsgmufltbsnwqqxyiihceardnznvgtbhxaxvwvvahlmvovmwohbcvinwyksbiweqrmlxzdyiebsrapcyhvfedevylycxcnfvcffyjbnrauszuonntxzqhjdzvxwxlirwxyrleegfogjvldnjpjfeuzhdazoglzkqmvoypngnveyzyjrbyvcgjqfeoytgimllhbgdskgcepmriwofbjropatrpwkreivzfuvxilniajcuvzybhfylvzabdusfwovictxgkdexqkrdykwktbpldxogyxosdnuojxgfuumdqaiucuuksxgbsbaqyshhhtyrjafnyxlgkagojuzezmhtgxpjqlccpesxnmkhoefyxlssfplpmcfcqaarjegtvlrmifbhodaiuitgmofmhegdwuktqvfeqttlkjaizogsidmeqqdzsvmvtnjdfgbbwiwghwbgbjbpekjgcewqxxtctnjjqfgwrsojmxkewinyfisweockbvlncucvfsgbbxkoceenbwhyodzhmygwudhtmdhznxuzampkodblpumztawhbzwgwikuepkudynurwohvrwcknxxmoxkrwdrqtpqynyvscfnuqbknakihangfrtmibqtippofubwpwqguifvamvikhzhmzunpcsavgwzacmkcamcrsgcdfwobeopbizrbuiwjszvdzzrldxxojsjhsclpyfulobrstzgmlzpuaayezxcxjslqcigvfhhteufloaunxejlwxyfnzfrvekvkrptwotoxnlvzancxvibrgxzipmdtgtepkfixrlinvnxsamdoovnfoijrconcqvpbttqdgsruggtkyrwdnckqoblgdisagjaqwlmyrytubymtmtooftodkpifxcehfizmdrdxitbkoftsuqyftcvsbxfuahzdjijaebmhouibkgmvsxmrfqxnrkxfrmgwgpxxumoratesmxjsatbjynsbnbxrjolmjxhgldmtkzdflptnswcovrebaotolekwzslnoygdodmfpbfydnizcnqnowyetiqztedlodkhadvcqbmoxhxkpupdefhgvecszkskniespfjioqvmkhbisirfmwuwgwozyhgeefcddnqnnnkdaydhxyecmpxuaubeozjhqunogqkupvqggwijtazxkivkbwyojmjbybnjioitdrboxrwiltanqqtdmviefppnxkxrmpwgzvxwyluofivztfcesgujzmpztnggrdxljzeoxlwoooinngilfskwjntgsacufsekmfvbsrgchvtsephxyechhmilbjapdfvuapwmdelnlhbqnselyzyqokjdmnwdvtjkhawuecfzfsqdglblnlyzcfiqvueuzthvmfipbvpovnhxoqslfxmyzwooyblhirsotifvssvcklubbenlagxwopkpsxgvjyjmztsbcgmvczkwqlgpktgozubznsagakpkimhohpnctpqetsilrwcqocjuzhqjmhxzfvgvrpeljcaaplpdvmxtwcvsuqtbfxihvgvssrakqauzcgrodgobmxuzsvkbagexfhvkeqkshcajlssmemiatuxlanqgqfzsiwegnvpldyykpijlnmodtxqupzlhrayemeywryllwgaymgqslewiagzeczwwdjfkqluxkqrjdldyrlgghbmrejfknmgupckxfafuddghzontxyofmjziccmdympkxwiryluoivzrwirinmkruiybqduyxaxxfkiiibfabyoxzjcwvqinfvvrlaeunminrqmjhbnnrshnrunkokgtsokktwjfpueaoluafnrosfxonfywqjmvnfkfruhroorzbssbxwhmfguakjkgidgswbzwkituezpsufaivlqihmqkmqdpdswmbegqxjkudchxujvnqqegxztbtctffquiqllhhgqlzeqqoxrmrxhlpkjrcdqqmwrsuempybalauvqcszyysfzujyevmmjxwjaxoinshknttzuxludsobesgqyeqiefrconykhgbwmbxgibhggoqbupkuikushvceshximmtoibewognxfhidauvjljhkjrjjuubmqqtarwznxxbyjirunnfbwhoxkrurxlzdffsllphpufprhrsgdmgojounrrkpkampyfqnmfniexvfjjxhphrhonzwvqknbsfdfwhezybdbkluioxnfzzajlntpedbzgfwdpckbjzfnicbapfrlddhemyavikeecwvdbwikwlekklumaufahtpgwpjakrejbcdbffxdpilykpnkivlxzhrxqyzitlvgxmwpjbarhbgnanfxoklypjoibbnebwpyhybkwrdaqybrtvrykwvtmbhdypzqixatjsowocphellxrqvmnebiryowpanmjjdgygvlrfucyzbziouetlbstrutedqnflrtsmkoymsjxcjqdffycwsbwyqhzcljilulzdzhbwwzwarwdlofgszodebpjtixoshdiaolgzzdqyungfjollnpxuqzwbevtcunejuwlcvusfvntgctlbcxrbjecbfqrrusgjikaqqlyihnczxmujhvszcynojskrwsygtacgkzfzdcuhuupxuuaorvagvbwpgnxaumtwtvkgbzxkyshqdwazmzygshbdnyspjvbdipskhuxccudbkrmasruhnwcmzfpxaoqinokcciowulxloibfkhedpzxjrdhrwyiodlpthsomgmmdmoqgvwoboyxwkdobmmmkduqtggqonhitybyeappriwfdzydgwtmzzvgjjdwncjlhpyoolumtpdvgyydeosxzxalldudbixtvipozktqoivojvwsgksirawsxnjzbohxwifjiowjueyubizngfsyeofqvtsmrlohsuxphlgjmulhtzigyoaforzzdemxwstpqbhlpfmpkxpjtxtryuafmrpsrgtlyvqkscnxnfiaxoshemfysbdfsfwuximhpjhditvehzwahgjfqlcwwvkxyssvliewlnwggbkptukkkovefrzhpifcsiemoejhjupvjdmbchntqosekrjigeldqxzxjoteavaffjolyagravifdqxwybxqyntkhgnzwpcwwlxzyvqefegtakhtrqkocdmlokkvxmkopvbggxvhysusycprmmovtgggydnextecevpwcidwbyadrgtbmkpjoyapqrtuagtpwzxiglxvxoeddmlkfzogjiyzgjcyfvakvgenyyxwrruhznetpfidwmualmkrypyjqxrpuneuwjxxuvnwkunjqjogtktmointxhbfyfhhmitmtlxtfdibjdbgbbaertdpdxmwcgukxzctagzrcsrpywovjndwwzikqxdvmyljhikwxyfcakacugvbpmfkqptudopililevkixuxbhqesgenyoqyejphbszzvkyhpjafbpitlrbllyhzeoeyiivsxcqxggrycabcxwqcvzeetpcgdhshulvslpheybdikkdivxkioqdefgwltywlxosbbsmiqjljsrkdzcrjunpdqqckerbwdnpmsixqtrwrnzgadzryjlgknyydgtdqfprdlalcveyaptxznloqbcdgbyyjkkvbznlaizyaaavkocvruqwsxrituaukwywykxblxkpjsjzooeqxrgycghxvmegzoplbeezldesnaaamuasbbhgivvpzcedduhddqppgpbkdjvuwqynvfitssyntxmkogxdnekbaeaobaipxadompfackrkjrhawzzxljsrlwkggdmmoovhplkegipzivnjkkauqyzxgxsxpglkziccvkajdeflltwsupetozdwwxdnnngaasfosutxcsthwbwfpzjwnrbweyxcrviokxmcdtmrucgggxcqjdggwkxivbwmcnqiqsejtmslisymganemsueyujeznrdhbitlpaqthbgivwqpmlecuwfmvspkmlyxmxwcirtkdhqaecrdcssxmpzfedfluqlsqlsrzwwuivfecrrniehxoftyoqzokamnuvgljenupjlzxsfmvinmmloxxqexgkemsqsohruvjloybesddejnjsmopyzancxtmoosktafnlmpfpkeufzfeaxbofnfmhyrfoqxrolrkfvunuofafdaugwtxziqvrfppisljgxcceniyuxnutknhonnkrjsbaoqolivuhauwgyimzrbzzbgaouspycdqgrueaggenbqdkiazbhliyfsatzyumirgjlhhklfxpkvvsrrofclmmztfpvakljwufcmaqeruwowwqilfawvrwgouvtywgdgnvzbnptritbbvippodawvqmqrdcwcppawsxbixvfebkzdhkgcxocwlbletvibssfuhtupeubhyatywmrgggbuawxupqcfmrerryzfuwjkludhqrtappkjugdquzszmoiwuhlentvaihwgopvlminrkkknkevqypsbpmrsdegzgoyaeyqaggcwckemhbldnqeeynevagqsoxrvlxqanwxkjfrgzsjfksqmjhuuvkyuhwjqxegqyxlgdrrcnjzkwtemftzdlmtbjmrcwidkqcobjospzlxporfqwjfjwxfvkxzwqonzeqnxwhtkappoqybmpzwwppsskcmbgvkzdnrnvvfqjeiruurjnvqtcvwxsjtdtluklaxorglvhnrgyxiwqyunteqsjtkvrmhspkebguguemjdjbjcbexvniwieafnbtefgnksdwkyeqhetoanqfkizzwqb"));

  }

  public boolean checkInclusion(String s1, String s2) {
    // write your code here
    if(s1.length() > s2.length()) {
      return false;
    }

    int[] dict = new int[26];
    for(int i = 0 ; i < s1.length(); i++ ) {
      dict[s1.charAt(i) - 'a']++;
    }

    int index = 0 ;
    while( index < s2.length() && dict[s2.charAt(index) - 'a'] == 0) {
      index++;
    }
    if(index == s2.length()) {
      return false;
    }

    for(int i = index; i <= s2.length() - s1.length(); i++) {
      String tmp = s2.substring(i, i + s1.length());
      if( isAnagram(Arrays.copyOfRange(dict, 0, dict.length), tmp )) {
        return true;
      }
    }

    return false;
  }


  private boolean isAnagram( int[] dict, String str) {
    for(int i = 0 ; i < str.length(); i++) {
      dict[str.charAt(i) - 'a']--;
      if(dict[str.charAt(i) - 'a'] < 0 ) {
        return false;
      }
    }
    return true;
  }


}

